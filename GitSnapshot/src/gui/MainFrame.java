/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import db.Database;
import git.GitRepo;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import model.Repo;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.revwalk.RevCommit;

/**
 *
 * @author U292156
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        DefaultListModel model = (DefaultListModel)(ctrlMessages.getModel());
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException ex) {
            model.addElement(ex);
        }
        
        Init();
    }

    private void Init() {
      ctrlRepository.removeAllItems();
      try {
          ResultSet rs = Repo.fetchAll();
          DefaultComboBoxModel model = (DefaultComboBoxModel)(ctrlRepository.getModel());
        while (rs.next()) {
          Repo adat = new Repo(rs);
          model.addElement(adat.getNeve());
        }
      } catch (SQLException ex) {
          Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ctrlMessages = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        ctrlSearchRepository = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ctrlIssueId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ctrlZipFilePrefix = new javax.swing.JTextField();
        ctrlSearchOutputDir = new javax.swing.JButton();
        ctrlStart = new javax.swing.JButton();
        ctrlOk = new javax.swing.JButton();
        ctrlRepository = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuAbout = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("res/Bundle"); // NOI18N
        setTitle(bundle.getString("MainTitle")); // NOI18N

        ctrlMessages.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(ctrlMessages);

        jLabel1.setText(bundle.getString("Repository")); // NOI18N

        ctrlSearchRepository.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/orange_folder_saved_search_22.png"))); // NOI18N
        ctrlSearchRepository.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlSearchRepositoryActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("IssueId")); // NOI18N

        ctrlIssueId.setText("DBWG-29");

        jLabel3.setText(bundle.getString("ZipBaseName")); // NOI18N

        ctrlZipFilePrefix.setText("cmsweb");
        ctrlZipFilePrefix.setToolTipText("");

        ctrlSearchOutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/orange_folder_saved_search_22.png"))); // NOI18N
        ctrlSearchOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlSearchOutputDirActionPerformed(evt);
            }
        });

        ctrlStart.setText(bundle.getString("StartButton")); // NOI18N
        ctrlStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlStartActionPerformed(evt);
            }
        });

        ctrlOk.setText(bundle.getString("OkButton")); // NOI18N
        ctrlOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlOkActionPerformed(evt);
            }
        });

        ctrlRepository.setEditable(true);
        ctrlRepository.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "d:\\lsyh\\deskbase\\cmsweb\\" }));
            ctrlRepository.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ctrlRepositoryActionPerformed(evt);
                }
            });

            jMenuAbout.setText(bundle.getString("GitPackages.jMenu2.text")); // NOI18N
            jMenuAbout.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuAboutActionPerformed(evt);
                }
            });
            jMenuBar1.add(jMenuAbout);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(ctrlIssueId)
                                .addComponent(ctrlZipFilePrefix, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ctrlRepository, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ctrlSearchRepository, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ctrlSearchOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ctrlStart)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ctrlOk)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ctrlRepository, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(ctrlSearchRepository, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(ctrlIssueId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(ctrlZipFilePrefix))
                        .addComponent(ctrlSearchOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ctrlStart)
                        .addComponent(ctrlOk))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAboutActionPerformed
        // TODO add your handling code here:
        DefaultListModel model = (DefaultListModel) ctrlMessages.getModel();
        model.addElement("jMenuAboutActionPerformed");
        model.addElement("");
    }//GEN-LAST:event_jMenuAboutActionPerformed

    private void ctrlSearchRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlSearchRepositoryActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select repository directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(new File((String)ctrlRepository.getSelectedItem()));
        int returnVal = chooser.showOpenDialog(this.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ctrlRepository.addItem(chooser.getSelectedFile().getAbsolutePath());
            ctrlRepository.setSelectedIndex(ctrlRepository.getItemCount()-1);
        }
    }//GEN-LAST:event_ctrlSearchRepositoryActionPerformed

    private void ctrlSearchOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlSearchOutputDirActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select target directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(new File(ctrlZipFilePrefix.getText()));
        int returnVal = chooser.showOpenDialog(this.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ctrlZipFilePrefix.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_ctrlSearchOutputDirActionPerformed

    private void ctrlStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlStartActionPerformed
        // TODO add your handling code here:
        ArrayList<String> commits = new ArrayList<>();
        ArrayList<String> files = new ArrayList<>();
        String wrkDir = (String)(ctrlRepository.getSelectedItem());
        String outZipPath = wrkDir;
        String outZipname = ctrlZipFilePrefix.getText()+"-"+ctrlIssueId.getText()+".zip";
        DefaultListModel model = (DefaultListModel)(ctrlMessages.getModel());
        model.addElement(outZipname);
        model.addElement("");

        try {
            try {
                Repo repo = new Repo();
                repo.setNeve(wrkDir);
                repo.setIssueId(ctrlIssueId.getText());
                repo.setZipPrefix(ctrlZipFilePrefix.getText());
                int nr = repo.insert();
                if (nr == 0) {
                    nr = repo.update();
                    if (nr > 0) {
                        model.addElement("updated:");
                    } else {
                        model.addElement("hiba");
                    }
                } else {
                    model.addElement("inserted:");
                    model.addElement(new Integer(repo.getId()).toString());
                }
            } catch (SQLException ex) {
                model.addElement(ex);
            }
            GitRepo repo = new GitRepo(wrkDir);
            ArrayList<String> branches = repo.getBranches();
            Iterator it = branches.iterator();
            model.addElement("Branches:");
            while (it.hasNext()) {
                model.addElement(it.next());
            }

            model.addElement(" ");
            model.addElement("Comments");
            ZipOutputStream zar = new ZipOutputStream(new FileOutputStream(outZipname));
            HashMap<String, ObjectId> sumfileList = new HashMap<>();
            int lastTimeStamp = -1;

            HashMap<String, RevCommit> comments = repo.getComments(ctrlIssueId.getText());
            it = comments.keySet().iterator();
            while (it.hasNext()) {
                String key = (String) it.next();
                RevCommit commit = comments.get(key);
                model.addElement(" ");
                model.addElement(key);
                model.addElement(commit.getFullMessage());
                model.addElement(commit.getCommitTime());
                model.addElement("Files:");

                HashMap<ObjectId, String> fileList = repo.getFilelistForComment(commit);
                for (ObjectId fname : fileList.keySet()) {
                    if (lastTimeStamp < commit.getCommitTime()) {
                        sumfileList.put(fileList.get(fname), fname);
                    } else {
                        if (!sumfileList.containsKey(fileList.get(fname))) {
                            sumfileList.put(fileList.get(fname), fname);
                        }
                    }
                }
                lastTimeStamp = commit.getCommitTime();
            }
            for (String fname : sumfileList.keySet()) {
                model.addElement(fname);
                byte[] tartalom = repo.open(sumfileList.get(fname));
                zar.putNextEntry(new ZipEntry(fname));
                zar.write(tartalom, 0, tartalom.length);
                zar.closeEntry();
            }
            zar.close();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ctrlStartActionPerformed

    private void ctrlOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlOkActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_ctrlOkActionPerformed

    private void ctrlRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlRepositoryActionPerformed
      // TODO add your handling code here:
      DefaultListModel model = (DefaultListModel) ctrlMessages.getModel();
      try {
        ResultSet rs = Repo.fetchByNeve((String)ctrlRepository.getSelectedItem());
        while (rs.next()) {
            Repo adat = new Repo(rs);
            ctrlIssueId.setText(adat.getIssueId());
            ctrlZipFilePrefix.setText(adat.getZipPrefix());
        }
      } catch (SQLException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_ctrlRepositoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ctrlIssueId;
    private javax.swing.JList ctrlMessages;
    private javax.swing.JButton ctrlOk;
    private javax.swing.JComboBox ctrlRepository;
    private javax.swing.JButton ctrlSearchOutputDir;
    private javax.swing.JButton ctrlSearchRepository;
    private javax.swing.JButton ctrlStart;
    private javax.swing.JTextField ctrlZipFilePrefix;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
