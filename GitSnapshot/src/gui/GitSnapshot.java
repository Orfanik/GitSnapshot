/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import git.GitRepo;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.revwalk.RevCommit;

/**
 *
 * @author U292156
 */
public class GitSnapshot extends javax.swing.JDialog {

    /**
     * Creates new form GitSnapshot
     */
    public GitSnapshot(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DefaultListModel model = new DefaultListModel();
        ctrlMessages.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ctrlMessages = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        ctrlRepository = new javax.swing.JTextField();
        ctrlSearchRepository = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ctrlIssueId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ctrlZipFilePrefix = new javax.swing.JTextField();
        ctrlSearchOutputDir = new javax.swing.JButton();
        ctrlStart = new javax.swing.JButton();
        ctrlOk = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuRepository = new javax.swing.JMenuItem();
        MenuGit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Git package maker");

        jScrollPane1.setViewportView(ctrlMessages);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("res/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("Repository")); // NOI18N

        ctrlSearchRepository.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/orange_folder_saved_search_22.png"))); // NOI18N
        ctrlSearchRepository.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlSearchRepositoryActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("IssueId")); // NOI18N

        jLabel3.setText(bundle.getString("ZipBaseName")); // NOI18N

        ctrlSearchOutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/orange_folder_saved_search_22.png"))); // NOI18N
        ctrlSearchOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlSearchOutputDirActionPerformed(evt);
            }
        });

        ctrlStart.setText(bundle.getString("StartButton")); // NOI18N
        ctrlStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlStartActionPerformed(evt);
            }
        });

        ctrlOk.setText(bundle.getString("OkButton")); // NOI18N
        ctrlOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctrlOkActionPerformed(evt);
            }
        });

        jMenu1.setText(bundle.getString("GitPackages.jMenu1.text")); // NOI18N

        MenuRepository.setText(bundle.getString("GitPackages.MenuRepository.text")); // NOI18N
        MenuRepository.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRepositoryActionPerformed(evt);
            }
        });
        jMenu1.add(MenuRepository);

        MenuGit.setText(bundle.getString("GitPackages.MenuGit.text")); // NOI18N
        MenuGit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGitActionPerformed(evt);
            }
        });
        jMenu1.add(MenuGit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("GitPackages.jMenu2.text")); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ctrlRepository)
                            .addComponent(ctrlIssueId)
                            .addComponent(ctrlZipFilePrefix, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ctrlSearchRepository, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ctrlSearchOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ctrlStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ctrlOk)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(ctrlRepository))
                    .addComponent(ctrlSearchRepository, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ctrlIssueId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(ctrlZipFilePrefix))
                    .addComponent(ctrlSearchOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlStart)
                    .addComponent(ctrlOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuGitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGitActionPerformed
        ProjectDelete dlg = new ProjectDelete((Frame) this.getParent(), true);
        dlg.setVisible(true);
    }//GEN-LAST:event_MenuGitActionPerformed

    private void MenuRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRepositoryActionPerformed
        ProjectAdd dlg = new ProjectAdd((Frame) this.getParent(), true);
        dlg.setVisible(true);

    }//GEN-LAST:event_MenuRepositoryActionPerformed

    private void ctrlStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlStartActionPerformed
        // TODO add your handling code here:
        DefaultListModel model = (DefaultListModel) ctrlMessages.getModel();
        ArrayList<String> commits = new ArrayList<>(); 
        ArrayList<String> files = new ArrayList<>(); 

        try {
            /// Test
        
            GitRepo repo = new GitRepo(ctrlRepository.getText());
            ArrayList<String> branches = repo.getBranches();
            Iterator it = branches.iterator();
            model.addElement("Branches:");
            while (it.hasNext()) {
                model.addElement(it.next());
            }
            
            model.addElement(" ");
            model.addElement("Comments");
            HashMap<String, RevCommit> comments = repo.getComments("DBWG-29");
            it = comments.keySet().iterator();
            while (it.hasNext()) {
                String key = (String) it.next();
                RevCommit commit = comments.get(key);
                model.addElement(" ");
                model.addElement(key);
                model.addElement(commit.getFullMessage());
                model.addElement("Files:");
                HashMap<ObjectId, String> fileList = repo.getFilelistForComment(commit);
                Iterator itf = fileList.keySet().iterator();
                while (itf.hasNext()) {
                    ObjectId fname = (ObjectId)itf.next();
                    model.addElement(fname.getName());
                    model.addElement(fileList.get(fname));
                    model.addElement(" ");
                    ArrayList<String> tartalom = repo.open(fname);
                    
                    Iterator its = tartalom.iterator();
                    while (its.hasNext()) {
                        model.addElement(its.next());
                    }
                }
            }
        } catch (IOException ex) {
            model.addElement(ex);
            Logger.getLogger(GitSnapshot.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    try {
      // TODO add your handling code here:
      String wrkDir = ctrlRepository.getText();
      String line;
      String outZipPath = wrkDir;
      String outZipname = ctrlZipFilePrefix.getText()+"-"+ctrlIssueId.getText()+".zip";
      Iterator<String> it;
      model.addElement(outZipname);
      model.addElement("");
    
      ProcessBuilder pb = new ProcessBuilder("git", "log", "--grep="+ctrlIssueId.getText());
      pb.directory(new File(wrkDir));
      //model.addElement(Arrays.deepToString(pb.command().toArray()));
      //pb.redirectOutput(Redirect.INHERIT);
      //pb.redirectError(Redirect.INHERIT);
      Process p = pb.start();
            
      BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
      while ((line = input.readLine()) != null) {
        if (line.contains("commit")) {
          commits.add(line.substring(7));
        } else if (line.contains("Author:") || line.contains("Date:")) {
          model.addElement(line);
        }
      }
      input.close();

      it = commits.iterator();
      while (it.hasNext()) {
        String commitHash = it.next();
        pb = new ProcessBuilder("git", "show",  "--pretty=format:", "--name-only", commitHash);
        pb.directory(new File(wrkDir));
        //pb.redirectOutput(Redirect.INHERIT);
        //pb.redirectError(Redirect.INHERIT);
        p = pb.start();

        input = new BufferedReader(new InputStreamReader(p.getInputStream()));
        while ((line = input.readLine()) != null) {
          if (!line.isEmpty() && !files.contains(line)) {
            files.add(line);
          }
        }
        input.close();
      }      

      Collections.sort(files);
      
      ZipOutputStream zar = new ZipOutputStream(new FileOutputStream(outZipname));
      it = files.iterator();
 
      while (it.hasNext()) {
        String changedFile = it.next();
        
        try {
          FileInputStream fis = new FileInputStream(wrkDir + File.separator + changedFile);            
          zar.putNextEntry(new ZipEntry(changedFile));
          int len;
          byte[] buf = new byte[1024];
          while ((len = fis.read(buf)) > 0)
            zar.write(buf, 0, len);
          zar.closeEntry();
        
          model.addElement(changedFile);
          fis.close();
        } catch (FileNotFoundException ex) {
          model.addElement(ex.toString());
        }
      }
      
      zar.close();
    } catch (IOException ex) {
      model.addElement(ex);
      Logger.getLogger(GitSnapshot.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_ctrlStartActionPerformed

    private void ctrlOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlOkActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_ctrlOkActionPerformed

    private void ctrlSearchRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlSearchRepositoryActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select repository directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(new File(ctrlRepository.getText()));
        int returnVal = chooser.showOpenDialog(this.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ctrlRepository.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_ctrlSearchRepositoryActionPerformed

    private void ctrlSearchOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctrlSearchOutputDirActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select target directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(new File(ctrlZipFilePrefix.getText()));
        int returnVal = chooser.showOpenDialog(this.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ctrlZipFilePrefix.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_ctrlSearchOutputDirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GitSnapshot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GitSnapshot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GitSnapshot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GitSnapshot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                GitSnapshot dialog = new GitSnapshot(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuGit;
    private javax.swing.JMenuItem MenuRepository;
    private javax.swing.JTextField ctrlIssueId;
    private javax.swing.JList ctrlMessages;
    private javax.swing.JButton ctrlOk;
    private javax.swing.JTextField ctrlRepository;
    private javax.swing.JButton ctrlSearchOutputDir;
    private javax.swing.JButton ctrlSearchRepository;
    private javax.swing.JButton ctrlStart;
    private javax.swing.JTextField ctrlZipFilePrefix;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
